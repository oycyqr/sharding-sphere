#################################### shardingsphere 配置  ###########################################################
spring:
  # 配置说明地址 http://shardingsphere.apache.org/document/legacy/3.x/document/cn/manual/sharding-proxy/configuration/
  shardingsphere:
    # 数据库
    datasource:
      # 数据库的别名
      names: ds0,ds1
      ds0: # 主库1
        ###  数据源类别
        type: com.alibaba.druid.pool.DruidDataSource
        driverClassName: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://146.56.192.87:3306/shardingsphere?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&serverTimezone=GMT%2B8
        username: oyc
        password: 111111
      ds1: # 主库1
        ###  数据源类别
        type: com.alibaba.druid.pool.DruidDataSource
        driverClassName: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://146.56.192.87:3306/shardingsphere1?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&serverTimezone=GMT%2B8
        username: oyc
        password: 111111
    # *** 数据库分库分表配置 start
    sharding:
      # 默认数据库
      default-data-source-name: ds0

      # 水平拆分的数据库（表） 配置分库 + 分表策略 行表达式分片策略
      # 1.默认分库策略 shardingsphere-->ds0,shardingsphere1-->ds1; user_id%2=0 -->ds0,user_id%2=1 -->ds1,
      default-database-strategy:
        inline:
          sharding-column: user_id
          algorithm-expression: ds$->{user_id % 2}
#      # 2.默认分表策略 user_split_0 user_split_1
#      default-table-strategy:
#        inline:
#          sharding-column: age  # 分表策略 其中user为逻辑表 分表主要取决于age行
#          algorithm-expression: user_split_$->{age % 2}
      # 数据节点
      tables:
        user:
          actual-data-nodes: ds$->{0..1}.user_split_dbtb_$->{0..1}
          table-strategy:
            inline:
              sharding-column: age  # 分表策略 其中user为逻辑表 分表主要取决于age行
              algorithm-expression: user_split_dbtb_$->{age % 2}
          key-generator:
            column: user_id
            type: SNOWFLAKE
#      # *** 数据库分库分表配置 end
#    sharding:
#      # 数据节点
#      tables:
#        user:
#          actual-data-nodes: ds0.user_$->{0..9}
#          table-strategy:
#            inline:
#              sharding-column: user_id  # 分表策略 其中user为逻辑表 分表主要取决于user_id行
#              algorithm-expression: user_$->{user_id % 10}
#          key-generator:
#            column: user_id
#            type: SNOWFLAKE
    props:
      # 打印SQL
      sql.show: true
      check:
        table:
          metadata: true
          # 是否在启动时检查分表元数据一致性
          enabled: true
