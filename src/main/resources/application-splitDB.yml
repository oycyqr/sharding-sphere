server:
  port: 8888
  servlet:
    context-path: /splitDB

#################################### shardingsphere 配置  ###########################################################
spring:
  # 配置说明地址 http://shardingsphere.apache.org/document/legacy/3.x/document/cn/manual/sharding-proxy/configuration/
  shardingsphere:
    # 数据库
    datasource:
      # 数据库的别名
      names: ds0,ds1
      ds0: # 主库1
        ###  数据源类别
        type: com.alibaba.druid.pool.DruidDataSource
        driverClassName: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://146.56.192.87:3306/shardingsphere?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&serverTimezone=GMT%2B8
        username: oyc
        password: oyc@123123
      ds1: # 主库1
        ###  数据源类别
        type: com.alibaba.druid.pool.DruidDataSource
        driverClassName: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://146.56.192.87:3306/shardingsphere1?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&serverTimezone=GMT%2B8
        username: oyc
        password: oyc@123123
    # *** 数据库分库分表配置 start
    sharding:
      # 默认数据库
      default-data-source-name: ds0

      # 水平拆分的数据库（表） 配置分库 + 分表策略 行表达式分片策略
      # 1.默认分库策略 shardingsphere-->ds0,shardingsphere1-->ds1; user_id%2=0 -->ds0,user_id%2=1 -->ds1,
      default-database-strategy:
        inline:
          sharding-column: user_id
          algorithm-expression: ds$->{user_id % 2}
#      # 2.默认分表策略 user_split_0 user_split_1
#      default-table-strategy:
#        inline:
#          sharding-column: age  # 分表策略 其中user为逻辑表 分表主要取决于age行
#          algorithm-expression: user_split_$->{age % 2}
      # 数据节点
      tables:
        user:
          actual-data-nodes: ds$->{0..1}.user
#          table-strategy:
#            inline:
#              sharding-column: user_id  # 分表策略 其中user为逻辑表 分表主要取决于user_id行
#              algorithm-expression: user_$->{user_id % 10}
          key-generator:
            column: user_id
            type: SNOWFLAKE
#      # *** 数据库分库分表配置 end
#    sharding:
#      # 数据节点
#      tables:
#        user:
#          actual-data-nodes: ds0.user_$->{0..9}
#          table-strategy:
#            inline:
#              sharding-column: user_id  # 分表策略 其中user为逻辑表 分表主要取决于user_id行
#              algorithm-expression: user_$->{user_id % 10}
#          key-generator:
#            column: user_id
#            type: SNOWFLAKE
    props:
      # 打印SQL
      sql.show: true
      check:
        table:
          metadata: true
          # 是否在启动时检查分表元数据一致性
          enabled: true
      query:
        with:
          cipher:
            column: true

#### mybatis-plus ###
mybatis-plus:
  # 如果是放在src/main/java目录下 classpath:/com/yourpackage/*/mapper/*Mapper.xml
  # 如果是放在resource目录 classpath:/mapper/*Mapper.xml
  mapper-locations: classpath:mapper/*.xml
  #实体扫描，多个package用逗号或者分号分隔
  type-aliases-package: com.oyc.shardingsphere.domain
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: false
  #主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID";
  global-config:
    db-config:
      id-type: auto
      #字段策略 0:"忽略判断",1:"非 NULL 判断"),2:"非空判断"
      field-strategy: not_empty
      #驼峰下划线转换
      column-underline: true
      #逻辑删除配置
      logic-delete-value: 0
      logic-not-delete-value: 1
      db-type: mysql
  #刷新mapper 调试神器
  refresh: false
